/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier_auto_7 (
    input clk,
    input rst,
    input trigger,
    output reg [23:0] io_led,
    output reg [3:0] io_sel,
    output reg [7:0] io_seg
  );
  
  
  
  wire [16-1:0] M_multiplier_out;
  reg [16-1:0] M_multiplier_a;
  reg [16-1:0] M_multiplier_b;
  reg [6-1:0] M_multiplier_alufn;
  multiplier_13 multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .alufn(M_multiplier_alufn),
    .out(M_multiplier_out)
  );
  
  localparam IDLE_state = 5'd0;
  localparam TEST1_state = 5'd1;
  localparam TEST2_state = 5'd2;
  localparam TEST3_state = 5'd3;
  localparam TEST4_state = 5'd4;
  localparam TEST5_state = 5'd5;
  localparam TEST6_state = 5'd6;
  localparam TEST7_state = 5'd7;
  localparam TEST8_state = 5'd8;
  localparam TEST9_state = 5'd9;
  localparam TEST10_state = 5'd10;
  localparam TEST11_state = 5'd11;
  localparam TEST12_state = 5'd12;
  localparam TEST13_state = 5'd13;
  localparam TEST14_state = 5'd14;
  localparam TEST15_state = 5'd15;
  localparam TEST16_state = 5'd16;
  localparam TEST17_state = 5'd17;
  localparam TEST18_state = 5'd18;
  localparam TEST19_state = 5'd19;
  localparam TEST20_state = 5'd20;
  localparam FAIL_state = 5'd21;
  localparam SUCCESS_state = 5'd22;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [1-1:0] M_sc_inc_state;
  stateCounter_18 sc (
    .clk(clk),
    .rst(rst),
    .inc_state(M_sc_inc_state)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_multiplier_a = 1'h0;
    M_multiplier_b = 1'h0;
    M_multiplier_alufn = 6'h00;
    io_seg = 8'hff;
    io_led = 24'h000000;
    M_seg_values = 16'hfbc0;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    if (trigger == 1'h0) begin
      M_state_d = IDLE_state;
    end
    
    case (M_state_q)
      IDLE_state: begin
        M_seg_values = 16'hfbc0;
        if (trigger == 1'h1) begin
          M_state_d = TEST1_state;
        end
      end
      TEST1_state: begin
        M_multiplier_a = 16'h003a;
        M_multiplier_b = 16'h0015;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa1;
        if (M_multiplier_out == 16'h04c2 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST2_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST2_state: begin
        M_multiplier_a = 16'h1d6e;
        M_multiplier_b = 16'h0000;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa2;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST3_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST3_state: begin
        M_multiplier_a = 16'hcf2c;
        M_multiplier_b = 16'h0000;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa3;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST4_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST4_state: begin
        M_multiplier_a = 16'h0926;
        M_multiplier_b = 16'hfffb;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa4;
        if (M_multiplier_out == 16'hd242 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST5_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST5_state: begin
        M_multiplier_a = 16'h22e4;
        M_multiplier_b = 16'hdd1c;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa5;
        if (M_multiplier_out == 16'ha4f0 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST6_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST6_state: begin
        M_multiplier_a = 16'h7fff;
        M_multiplier_b = 16'h7fff;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa6;
        if (M_multiplier_out == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST7_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST7_state: begin
        M_multiplier_a = 16'hef71;
        M_multiplier_b = 16'hef71;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa7;
        if (M_multiplier_out == 16'h2fe1 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST8_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST8_state: begin
        M_multiplier_a = 16'h0000;
        M_multiplier_b = 16'h0000;
        M_multiplier_alufn = 6'h02;
        M_seg_values = 16'haaa8;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST9_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST9_state: begin
        M_multiplier_a = 16'h1d6e;
        M_multiplier_b = 16'h003a;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haaa9;
        if (M_multiplier_out == 16'h0081 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST10_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST10_state: begin
        M_multiplier_a = 16'h003a;
        M_multiplier_b = 16'h1d6e;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa10;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST11_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST11_state: begin
        M_multiplier_a = 16'h1d6e;
        M_multiplier_b = 16'h1d6e;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa11;
        if (M_multiplier_out == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST12_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST12_state: begin
        M_multiplier_a = 16'h1d6e;
        M_multiplier_b = 16'h0000;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa12;
        if (M_multiplier_out == 16'hffff && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST13_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST13_state: begin
        M_multiplier_a = 16'he9d7;
        M_multiplier_b = 16'he9d7;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa13;
        if (M_multiplier_out == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST14_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST14_state: begin
        M_multiplier_a = 16'h003a;
        M_multiplier_b = 16'he166;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa14;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST15_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST15_state: begin
        M_multiplier_a = 16'he166;
        M_multiplier_b = 16'hffa1;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa15;
        if (M_multiplier_out == 16'h0052 && M_sc_inc_state == 1'h1) begin
          M_state_d = TEST16_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST16_state: begin
        M_multiplier_a = 16'he166;
        M_multiplier_b = 16'h8000;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa16;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST17_state: begin
        M_multiplier_a = 16'h8000;
        M_multiplier_b = 16'h1d6e;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa17;
        if (M_multiplier_out == 16'hfffc && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST18_state: begin
        M_multiplier_a = 16'hffa1;
        M_multiplier_b = 16'h1d6e;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa18;
        if (M_multiplier_out == 16'h0000 && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST19_state: begin
        M_multiplier_a = 16'he67a;
        M_multiplier_b = 16'h0000;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa19;
        if (M_multiplier_out == 16'h0001 && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      TEST20_state: begin
        M_multiplier_a = 16'h0000;
        M_multiplier_b = 16'h0000;
        M_multiplier_alufn = 6'h03;
        M_seg_values = 16'haa20;
        if (M_multiplier_out == 16'hffff && M_sc_inc_state == 1'h1) begin
          M_state_d = SUCCESS_state;
        end else begin
          if (M_sc_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
      end
      SUCCESS_state: begin
        M_seg_values = 16'hdedd;
      end
      FAIL_state: begin
        M_seg_values = 16'hfedd;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
