module adder_auto (
    input clk,  // clock
    input rst,  // reset
    input trigger, // this will start the relevant states of the test
    output io_led [3][8],  // LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output io_seg [8]      // 7-segment LEDs on IO Shield
  ) {
  
  adder adder;
  
  .clk(clk) {   
  
    .rst(rst) {
      // Define a finite state machine with 19 states 
      // One idle state, 16 test cases, a fail and a success state
      fsm state = {IDLE, TEST1, TEST2, TEST3, TEST4, TEST5, TEST6, TEST7, TEST8, 
      TEST9, TEST10, TEST11, TEST12, TEST13, TEST14, TEST15, TEST16, FAIL, SUCCESS};
      multi_seven_seg seg;
      stateCounter sc;
    }
  }
  

  always {
    adder.a = 0;
    adder.b = 0;
    adder.alufn = 6b0;
    io_seg = 8hff;          // turn segments off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    // The segments will display "HELO" by default
    seg.values = {4hf, 4hb, 4hc, 4h0};
    
    io_seg = ~seg.seg; // Connect segments to the driver
    io_sel = ~seg.sel; // Connect digit select to the driver
    
    // Set the initial state 
    if(trigger == 0){
        state.d = state.IDLE; // Set the initial state to idle because mojo_top initialises trigger to 0
        }
    
    //we use case statements to define the response for different states in the stae machine
    case (state.q) {
            
      state.IDLE:
        seg.values = {4hf, 4hb, 4hc, 4h0};    
        if(trigger == 1) {
          state.d = state.TEST1;
        }
      
      // TEST 1
      state.TEST1:
        adder.a = 16b0000000000111010;
        adder.b = 16b0000100101010110;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h1};  // 1
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000100110010000 && sc.inc_state == 1) {
          state.d = state.TEST2;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
      // TEST2 
      state.TEST2:
        adder.a = 16b0001110101101110;
        adder.b = 16b0000000000000000;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h2};  // 2
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0001110101101110 && sc.inc_state == 1) {
          state.d = state.TEST3;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 3
      state.TEST3:
        adder.a = 16b0000100100100110;
        adder.b = 16b1111111001011011;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h3};  // 3
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000011110000001 && sc.inc_state == 1) {
          state.d = state.TEST4;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 4
      state.TEST4:
        adder.a = 16b0010001011100100;
        adder.b = 16b1101110100011100;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h4};  // 4
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000000000000000 && sc.inc_state == 1) {
          state.d = state.TEST5;
        }


        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 5
      state.TEST5:
        adder.a = 16b0000000111110100;
        adder.b = 16b1111110101010101;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h5};  // 5
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b1111111101001001 && sc.inc_state == 1) {
          state.d = state.TEST6;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 6
      state.TEST6:
        adder.a = 16b0111111111111111;
        adder.b = 16b0000000000000001;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h6};  // 6
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b1000000000000000 && sc.inc_state == 1) {
          state.d = state.TEST7;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 7
      state.TEST7:
        adder.a = 16b0111111111111111;
        adder.b = 16b0111111111111111;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h7};  // 7
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b1111111111111110 && sc.inc_state == 1) {
          state.d = state.TEST8;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 8
      state.TEST8:
        adder.a = 16b0000000000000000;
        adder.b = 16b0000000000000000;
        adder.alufn = 6b0;
        seg.values = {4ha, 4ha, 4ha, 4h8};  // 8
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000000000000000 && sc.inc_state == 1) {
          state.d = state.TEST9;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 9
      state.TEST9:
        adder.a = 16b1100111100101100;
        adder.b = 16b1111111110100001;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4ha, 4h9};  // 9
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b1100111110001011 && sc.inc_state == 1) {
          state.d = state.TEST10;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 10
      state.TEST10:
        adder.a = 16b1110111101110001;
        adder.b = 16b0000000000000000;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h0};  // 10
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b1110111101110001 && sc.inc_state == 1) {
          state.d = state.TEST11;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 11
      state.TEST11:
        adder.a = 16b1110011001111010;
        adder.b = 16b0010011010010001;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h1};  // 11
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b1011111111101001 && sc.inc_state == 1) {
          state.d = state.TEST12;
        }
        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 12
      state.TEST12:
        adder.a = 16b1110100111010111;
        adder.b = 16b1110100111010111;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h2};  // 12
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000000000000000 && sc.inc_state == 1) {
          state.d = state.TEST13;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 13
      state.TEST13:
        adder.a = 16b1110000101100110;
        adder.b = 16b1101101000000101;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h3};  // 13
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000011101100001 && sc.inc_state == 1) {
          state.d = state.TEST14;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 14
      state.TEST14:
        adder.a = 16b1000000000000000;
        adder.b = 16b0000000000000001;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h4};  // 14
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0111111111111111 && sc.inc_state == 1) {
          state.d = state.TEST15;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 15
      state.TEST15:
        adder.a = 16b1000000000000000;
        adder.b = 16b0111111111111111;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h5};  // 1
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000000000000001 && sc.inc_state == 1) {
          state.d = state.TEST16;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        
        // TEST 16
      state.TEST16:
        adder.a = 16b0000000000000000;
        adder.b = 16b0000000000000000;
        adder.alufn = 6b1;
        seg.values = {4ha, 4ha, 4h1, 4h6};  // 1
        // Check if the outputs is expected
        //If it is correct go to the next test case(nest state), if not, go to fail state
        
        if (adder.out == 16b0000000000000000 && sc.inc_state == 1) {
          state.d = state.SUCCESS;
        }

        else if (sc.inc_state == 1) {
          state.d = state.FAIL;
        }
        

        state.SUCCESS:
          //Display the letters 'PASS'
          seg.values = {4hd,4he,4hd,4hd};
        
        state.FAIL:
          //Display the letters "NAYY"
          seg.values = {4hf,4he,4hd,4hd};
       
        }

  }
}